#!/usr/bin/env python

import argparse
import os
import sys
from argparse import ArgumentParser
from enum import Enum
from shutil import which

import crossplane

from nginxctl import __version__
from nginxctl.helpers import it_consumes, pp, strings, unquoted_str
from nginxctl.parser import parse_cli_config
from nginxctl.pkg_utils import PythonPackageInfo


class Command(Enum):
    serve = 'serve'
    emit = 'emit'
    dry_run = 'dry_run'

    def __str__(self):
        return self.value


# Slightly modified https://stackoverflow.com/a/11415816
class ReadableDir(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        def is_dir_readable(prospective_dir):
            if not os.path.isdir(prospective_dir):
                raise argparse.ArgumentTypeError("{!r} is not a valid path".format(prospective_dir))
            elif not os.access(prospective_dir, os.R_OK):
                raise argparse.ArgumentTypeError("{!r} is not a readable dir".format(prospective_dir))

        return it_consumes(map(is_dir_readable, values))


def _build_parser():
    if 'GITHUB_ACTION' in os.environ:
        default_nginx, default_prefix, default_conf = (
            '/usr/local/bin/nginx', '/etc/nginx/', '/etc/nginx/nginx.conf'
        )
    else:
        default_nginx = which('nginx')
        default_nginx_usage = next(line
                                   for line in strings(default_nginx)
                                   if 'set prefix path' in line).split()
        default_prefix, default_conf = tuple(
            l[:-1]
            for i, l in enumerate(default_nginx_usage)
            if i > 0 and 'default' in default_nginx_usage[i - 1]
        )

    parser = ArgumentParser(
        prog='python -m {}'.format(PythonPackageInfo().get_app_name()),
        description='Commands for modifying and controlling nginx over the command-line.',
        epilog='Example usage: %(prog)s -w \'/tmp/wwwroot\' -p 8080 -i \'192.168.2.1\' '
               '-w \'/mnt/webroot\' -p 9001 -i \'localhost\' --path \'/api\' --proxy-pass  \'192.168.2.1/api\''
    )
    # parser.add_argument('command', help='serve, emit, or dry_run', type=Command, choices=list(Command))

    parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))

    # parser.add_argument('--dns', help='DNS alias')
    # parser.add_argument('--ip', help='Public IP address', required=True)
    parser.add_argument('--listen', help='Listen (e.g., port)', default='8080', nargs='*')
    parser.add_argument('--prefix', help='set prefix path, e.g., {!r}'.format(default_prefix),
                        default=default_prefix)
    parser.add_argument('--config-filename',
                        help='Name of file. Placed in prefix folder—e.g., {!r}—if not absolute. E.g., nginx.conf'.format(
                            default_nginx),
                        default=default_nginx)
    parser.add_argument('--root', help=argparse.SUPPRESS, nargs='*',
                        type=unquoted_str, action=ReadableDir, default=os.getcwd())
    parser.add_argument('--nginx',
                        help='Path to nginx binary, defaults to first in PATH, i.e., {!r}'.format(default_nginx),
                        dest='nginx', default=default_nginx)
    parser.add_argument('-b', '--block', dest='block', help='Block, e.g., server or http', type=str, nargs='*')

    # Pass along to the `nginx` process:
    parser.add_argument('-?', help=argparse.SUPPRESS, action='store_true')  # this help
    parser.add_argument('-V', help=argparse.SUPPRESS)  # show version and configure options then exit
    parser.add_argument('-t', help=argparse.SUPPRESS)  # test configuration and exit
    parser.add_argument('-T', help=argparse.SUPPRESS)  # test configuration, dump it and exit
    parser.add_argument('-q', help=argparse.SUPPRESS)  # suppress non-error messages during configuration testing
    parser.add_argument('-s', help=argparse.SUPPRESS)  # send signal to a master process: stop, quit, reopen, reload
    # parser.add_argument('-p', help=argparse.SUPPRESS)  # set prefix path (default: /etc/nginx/)
    parser.add_argument('-c', help=argparse.SUPPRESS)  # set configuration file (default: /etc/nginx/nginx.conf)
    parser.add_argument('-g', help=argparse.SUPPRESS)  # set global directives out of configuration file

    # Craziness
    parser.add_argument('-{', help='Starting parentheses (raise hierarchy). Note: `-b`/`--block` does this also.',
                        dest='open_paren', nargs='*')
    parser.add_argument('-}', help='Ending parentheses (lower hierarchy)', dest='close_paren', nargs='*')

    return parser


def add_update_support_cli_args(arg, parser, supported_fields_f):
    supported_fields = supported_fields_f()
    dest = unquoted_str(arg).lstrip('-')
    if arg.startswith('-') and arg not in supported_fields:
        parser.add_argument(
            arg, type=unquoted_str, help='Autogenerated',
            dest='{}_autogenerated'.format(dest)
        )
    return supported_fields_f()


# if __name__ == '__main__':
#     r = ()
#     print('main')
#     pp(r)
#     # Popen([which('bash'), '-c', "while true; do echo 'foo'; sleep 2s; done"])

j = {
    "file": "/tmp/wwwroot/server.conf",
    "status": "ok",
    "errors": [],
    "parsed": [
        {
            "directive": "server",
            "line": 1,
            "args": [],
            "block": [
                {
                    "directive": "server_name",
                    "line": 2,
                    "args": [
                        "localhost"
                    ]
                },
                {
                    "directive": "listen",
                    "line": 3,
                    "args": [
                        "8080"
                    ]
                },
                {
                    "directive": "location",
                    "line": 5,
                    "args": [
                        "/"
                    ],
                    "block": [
                        {
                            "directive": "root",
                            "line": 6,
                            "args": [
                                "/tmp/wwwroot"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}

if __name__ == '__main__':
    parser = _build_parser()
    known, unknown = parser.parse_known_args()
    print('known:\t\t', known, ';',
          '\nunknown:\t', unknown, ';',
          '\nsys.argv:\t')

    config = parse_cli_config(sys.argv[1:])
    pp(config)

    print(crossplane.build([config]))

    # nginx, ctl = {}, {}
    # it_consumes(nginx.update({k: v}) if k in frozenset(('?', 'V', 't', 'T', 'q', 's', 'c', 'g'))
    #            else ctl.update({k: v})
    #            for k, v in vars(_build_parser().parse_args()).items())
    # pp(ctl)

    # pp({'nginx': nginx, 'ctl': ctl})

__all__ = ['_build_parser']
